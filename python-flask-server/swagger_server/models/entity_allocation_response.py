# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.entity_allocation import EntityAllocation  # noqa: F401,E501
from swagger_server import util


class EntityAllocationResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, original_request: EntityAllocation=None, allocation_status: str=None, allocation_status_details_message: str=None):  # noqa: E501
        """EntityAllocationResponse - a model defined in Swagger

        :param original_request: The original_request of this EntityAllocationResponse.  # noqa: E501
        :type original_request: EntityAllocation
        :param allocation_status: The allocation_status of this EntityAllocationResponse.  # noqa: E501
        :type allocation_status: str
        :param allocation_status_details_message: The allocation_status_details_message of this EntityAllocationResponse.  # noqa: E501
        :type allocation_status_details_message: str
        """
        self.swagger_types = {
            'original_request': EntityAllocation,
            'allocation_status': str,
            'allocation_status_details_message': str
        }

        self.attribute_map = {
            'original_request': 'originalRequest',
            'allocation_status': 'allocationStatus',
            'allocation_status_details_message': 'allocationStatusDetailsMessage'
        }

        self._original_request = original_request
        self._allocation_status = allocation_status
        self._allocation_status_details_message = allocation_status_details_message

    @classmethod
    def from_dict(cls, dikt) -> 'EntityAllocationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EntityAllocationResponse of this EntityAllocationResponse.  # noqa: E501
        :rtype: EntityAllocationResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def original_request(self) -> EntityAllocation:
        """Gets the original_request of this EntityAllocationResponse.


        :return: The original_request of this EntityAllocationResponse.
        :rtype: EntityAllocation
        """
        return self._original_request

    @original_request.setter
    def original_request(self, original_request: EntityAllocation):
        """Sets the original_request of this EntityAllocationResponse.


        :param original_request: The original_request of this EntityAllocationResponse.
        :type original_request: EntityAllocation
        """

        self._original_request = original_request

    @property
    def allocation_status(self) -> str:
        """Gets the allocation_status of this EntityAllocationResponse.


        :return: The allocation_status of this EntityAllocationResponse.
        :rtype: str
        """
        return self._allocation_status

    @allocation_status.setter
    def allocation_status(self, allocation_status: str):
        """Sets the allocation_status of this EntityAllocationResponse.


        :param allocation_status: The allocation_status of this EntityAllocationResponse.
        :type allocation_status: str
        """
        allowed_values = ["ALLOCATED", "NOT_PERMITTED", "ERROR"]  # noqa: E501
        if allocation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `allocation_status` ({0}), must be one of {1}"
                .format(allocation_status, allowed_values)
            )

        self._allocation_status = allocation_status

    @property
    def allocation_status_details_message(self) -> str:
        """Gets the allocation_status_details_message of this EntityAllocationResponse.


        :return: The allocation_status_details_message of this EntityAllocationResponse.
        :rtype: str
        """
        return self._allocation_status_details_message

    @allocation_status_details_message.setter
    def allocation_status_details_message(self, allocation_status_details_message: str):
        """Sets the allocation_status_details_message of this EntityAllocationResponse.


        :param allocation_status_details_message: The allocation_status_details_message of this EntityAllocationResponse.
        :type allocation_status_details_message: str
        """

        self._allocation_status_details_message = allocation_status_details_message
