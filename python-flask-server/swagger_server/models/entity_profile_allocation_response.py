# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.entity_profile_allocation import EntityProfileAllocation  # noqa: F401,E501
from swagger_server import util


class EntityProfileAllocationResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, original_request: EntityProfileAllocation=None, allocation_status: str=None, allocation_status_details_message: str=None):  # noqa: E501
        """EntityProfileAllocationResponse - a model defined in Swagger

        :param original_request: The original_request of this EntityProfileAllocationResponse.  # noqa: E501
        :type original_request: EntityProfileAllocation
        :param allocation_status: The allocation_status of this EntityProfileAllocationResponse.  # noqa: E501
        :type allocation_status: str
        :param allocation_status_details_message: The allocation_status_details_message of this EntityProfileAllocationResponse.  # noqa: E501
        :type allocation_status_details_message: str
        """
        self.swagger_types = {
            'original_request': EntityProfileAllocation,
            'allocation_status': str,
            'allocation_status_details_message': str
        }

        self.attribute_map = {
            'original_request': 'originalRequest',
            'allocation_status': 'allocationStatus',
            'allocation_status_details_message': 'allocationStatusDetailsMessage'
        }

        self._original_request = original_request
        self._allocation_status = allocation_status
        self._allocation_status_details_message = allocation_status_details_message

    @classmethod
    def from_dict(cls, dikt) -> 'EntityProfileAllocationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EntityProfileAllocationResponse of this EntityProfileAllocationResponse.  # noqa: E501
        :rtype: EntityProfileAllocationResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def original_request(self) -> EntityProfileAllocation:
        """Gets the original_request of this EntityProfileAllocationResponse.


        :return: The original_request of this EntityProfileAllocationResponse.
        :rtype: EntityProfileAllocation
        """
        return self._original_request

    @original_request.setter
    def original_request(self, original_request: EntityProfileAllocation):
        """Sets the original_request of this EntityProfileAllocationResponse.


        :param original_request: The original_request of this EntityProfileAllocationResponse.
        :type original_request: EntityProfileAllocation
        """

        self._original_request = original_request

    @property
    def allocation_status(self) -> str:
        """Gets the allocation_status of this EntityProfileAllocationResponse.


        :return: The allocation_status of this EntityProfileAllocationResponse.
        :rtype: str
        """
        return self._allocation_status

    @allocation_status.setter
    def allocation_status(self, allocation_status: str):
        """Sets the allocation_status of this EntityProfileAllocationResponse.


        :param allocation_status: The allocation_status of this EntityProfileAllocationResponse.
        :type allocation_status: str
        """
        allowed_values = ["ALLOCATED", "ALREADY_ALLOCATED_FOR_ENTITY", "ALREADY_ALLOCATED_FOR_DIFFERENT_ENTITY", "ERROR"]  # noqa: E501
        if allocation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `allocation_status` ({0}), must be one of {1}"
                .format(allocation_status, allowed_values)
            )

        self._allocation_status = allocation_status

    @property
    def allocation_status_details_message(self) -> str:
        """Gets the allocation_status_details_message of this EntityProfileAllocationResponse.


        :return: The allocation_status_details_message of this EntityProfileAllocationResponse.
        :rtype: str
        """
        return self._allocation_status_details_message

    @allocation_status_details_message.setter
    def allocation_status_details_message(self, allocation_status_details_message: str):
        """Sets the allocation_status_details_message of this EntityProfileAllocationResponse.


        :param allocation_status_details_message: The allocation_status_details_message of this EntityProfileAllocationResponse.
        :type allocation_status_details_message: str
        """

        self._allocation_status_details_message = allocation_status_details_message
